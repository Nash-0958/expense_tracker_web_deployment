<<<<<<< HEAD
Expense Tracker Application
Objective
To develop a simple personal expense tracker using Python that allows users to:

Record and categorize expenses and incomes.
View totals of debited and credited amounts.
Export the data as a CSV file.
Technology Stack
Python: Programming language used for the application.
Tkinter: Standard GUI library for creating the graphical user interface.
Pandas: Library for data manipulation and exporting data to CSV.
Code Explanation
1. Imports and Initialization
python
Copy code
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pandas as pd
import datetime
tkinter: Provides the tools for creating the GUI elements.
ttk: Part of tkinter, used for creating styled widgets.
messagebox: Displays dialog boxes for warnings and information.
pandas: Used for handling data and exporting to CSV.
datetime: Used to manage dates.
2. Main Application Class
python
Copy code
class ExpenseTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker")

        self.entries = []
        self.total_debited = 0
        self.total_credited = 0

        self.create_widgets()
__init__ Method: Initializes the main application window and variables. It sets up the GUI components through the create_widgets method.
3. Creating GUI Widgets
python
Copy code
    def create_widgets(self):
        tk.Label(self.root, text="Type:").grid(row=0, column=0, padx=10, pady=10)
        self.type_var = tk.StringVar()
        self.type_dropdown = ttk.Combobox(self.root, textvariable=self.type_var, values=["debit", "credit"], state="readonly")
        self.type_dropdown.grid(row=0, column=1, padx=10, pady=10)
        self.type_dropdown.set("debit")

        tk.Label(self.root, text="Amount:").grid(row=1, column=0, padx=10, pady=10)
        self.amount_entry = tk.Entry(self.root)
        self.amount_entry.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Category:").grid(row=2, column=0, padx=10, pady=10)
        self.category_entry = tk.Entry(self.root)
        self.category_entry.grid(row=2, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Date:").grid(row=3, column=0, padx=10, pady=10)
        self.date_entry = tk.Entry(self.root)
        self.date_entry.grid(row=3, column=1, padx=10, pady=10)
        self.date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))

        self.add_button = tk.Button(self.root, text="Add Entry", command=self.add_entry)
        self.add_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.tree = ttk.Treeview(self.root, columns=("Type", "Amount", "Category", "Date"), show="headings")
        self.tree.heading("Type", text="Type")
        self.tree.heading("Amount", text="Amount")
        self.tree.heading("Category", text="Category")
        self.tree.heading("Date", text="Date")
        self.tree.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.total_debited_label = tk.Label(self.root, text=f"Total Debited: $0.00")
        self.total_debited_label.grid(row=6, column=0, padx=10, pady=10)
        self.total_credited_label = tk.Label(self.root, text=f"Total Credited: $0.00")
        self.total_credited_label.grid(row=6, column=1, padx=10, pady=10)

        self.export_button = tk.Button(self.root, text="Export as CSV", command=self.export_csv)
        self.export_button.grid(row=7, column=0, columnspan=2, pady=10)
Labels and Entry Widgets: Allow users to input the type (debit/credit), amount, category, and date.
Combobox: Provides a dropdown menu for selecting the entry type.
Button: Triggers the add_entry method to process and add entries.
Treeview: Displays a table of added entries.
Total Labels: Show the calculated totals for debited and credited amounts.
Export Button: Triggers the export_csv method to export data as a CSV file.
4. Adding Entries
python
Copy code
    def add_entry(self):
        type = self.type_var.get()
        amount = self.amount_entry.get()
        category = self.category_entry.get()
        date = self.date_entry.get()

        if not amount or not category or not date:
            messagebox.showwarning("Input Error", "Please fill out all fields.")
            return

        try:
            amount = float(amount)
        except ValueError:
            messagebox.showwarning("Input Error", "Amount must be a number.")
            return

        if type == "debit":
            self.total_debited += amount
        else:
            self.total_credited += amount

        self.entries.append({"Type": type, "Amount": amount, "Category": category, "Date": date})
        self.update_table()
        self.update_totals()
        self.clear_entries()
Validation: Ensures all fields are filled and amount is a number.
Updating Totals: Adds the amount to either debited or credited totals based on the type.
Updating Table: Calls update_table to refresh the displayed entries.
Clearing Entries: Resets the input fields.
5. Updating the Table
python
Copy code
    def update_table(self):
        for row in self.tree.get_children():
            self.tree.delete(row)
        for entry in self.entries:
            self.tree.insert("", "end", values=(entry["Type"], f"${entry['Amount']:.2f}", entry["Category"], entry["Date"]))
Refreshing Data: Clears existing table rows and re-inserts updated data.
6. Updating Totals
python
Copy code
    def update_totals(self):
        self.total_debited_label.config(text=f"Total Debited: ${self.total_debited:.2f}")
        self.total_credited_label.config(text=f"Total Credited: ${self.total_credited:.2f}")
Updating Labels: Reflects the updated totals on the GUI.
7. Clearing Input Fields
python
Copy code
    def clear_entries(self):
        self.amount_entry.delete(0, "end")
        self.category_entry.delete(0, "end")
        self.date_entry.delete(0, "end")
        self.date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))
Resetting Fields: Clears and resets input fields for the next entry.
8. Exporting to CSV
python
Copy code
    def export_csv(self):
        df = pd.DataFrame(self.entries)
        df.to_csv('expenses.csv', index=False)
        messagebox.showinfo("Export Success", "Data exported to expenses.csv")
CSV Export: Converts entries to a DataFrame and saves them to a CSV file.
Confirmation: Shows a success message when the export is complete.
9. Running the Application
python
Copy code
if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTrackerApp(root)
    root.mainloop() 
Main Function: Initializes the Tkinter window and starts the application loop.
Conclusion
=======
Expense Tracker Application
Objective
To develop a simple personal expense tracker using Python that allows users to:

Record and categorize expenses and incomes.
View totals of debited and credited amounts.
Export the data as a CSV file.
Technology Stack
Python: Programming language used for the application.
Tkinter: Standard GUI library for creating the graphical user interface.
Pandas: Library for data manipulation and exporting data to CSV.
Code Explanation
1. Imports and Initialization
python
Copy code
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pandas as pd
import datetime
tkinter: Provides the tools for creating the GUI elements.
ttk: Part of tkinter, used for creating styled widgets.
messagebox: Displays dialog boxes for warnings and information.
pandas: Used for handling data and exporting to CSV.
datetime: Used to manage dates.
2. Main Application Class
python
Copy code
class ExpenseTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker")

        self.entries = []
        self.total_debited = 0
        self.total_credited = 0

        self.create_widgets()
__init__ Method: Initializes the main application window and variables. It sets up the GUI components through the create_widgets method.
3. Creating GUI Widgets
python
Copy code
    def create_widgets(self):
        tk.Label(self.root, text="Type:").grid(row=0, column=0, padx=10, pady=10)
        self.type_var = tk.StringVar()
        self.type_dropdown = ttk.Combobox(self.root, textvariable=self.type_var, values=["debit", "credit"], state="readonly")
        self.type_dropdown.grid(row=0, column=1, padx=10, pady=10)
        self.type_dropdown.set("debit")

        tk.Label(self.root, text="Amount:").grid(row=1, column=0, padx=10, pady=10)
        self.amount_entry = tk.Entry(self.root)
        self.amount_entry.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Category:").grid(row=2, column=0, padx=10, pady=10)
        self.category_entry = tk.Entry(self.root)
        self.category_entry.grid(row=2, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Date:").grid(row=3, column=0, padx=10, pady=10)
        self.date_entry = tk.Entry(self.root)
        self.date_entry.grid(row=3, column=1, padx=10, pady=10)
        self.date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))

        self.add_button = tk.Button(self.root, text="Add Entry", command=self.add_entry)
        self.add_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.tree = ttk.Treeview(self.root, columns=("Type", "Amount", "Category", "Date"), show="headings")
        self.tree.heading("Type", text="Type")
        self.tree.heading("Amount", text="Amount")
        self.tree.heading("Category", text="Category")
        self.tree.heading("Date", text="Date")
        self.tree.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.total_debited_label = tk.Label(self.root, text=f"Total Debited: $0.00")
        self.total_debited_label.grid(row=6, column=0, padx=10, pady=10)
        self.total_credited_label = tk.Label(self.root, text=f"Total Credited: $0.00")
        self.total_credited_label.grid(row=6, column=1, padx=10, pady=10)

        self.export_button = tk.Button(self.root, text="Export as CSV", command=self.export_csv)
        self.export_button.grid(row=7, column=0, columnspan=2, pady=10)
Labels and Entry Widgets: Allow users to input the type (debit/credit), amount, category, and date.
Combobox: Provides a dropdown menu for selecting the entry type.
Button: Triggers the add_entry method to process and add entries.
Treeview: Displays a table of added entries.
Total Labels: Show the calculated totals for debited and credited amounts.
Export Button: Triggers the export_csv method to export data as a CSV file.
4. Adding Entries
python
Copy code
    def add_entry(self):
        type = self.type_var.get()
        amount = self.amount_entry.get()
        category = self.category_entry.get()
        date = self.date_entry.get()

        if not amount or not category or not date:
            messagebox.showwarning("Input Error", "Please fill out all fields.")
            return

        try:
            amount = float(amount)
        except ValueError:
            messagebox.showwarning("Input Error", "Amount must be a number.")
            return

        if type == "debit":
            self.total_debited += amount
        else:
            self.total_credited += amount

        self.entries.append({"Type": type, "Amount": amount, "Category": category, "Date": date})
        self.update_table()
        self.update_totals()
        self.clear_entries()
Validation: Ensures all fields are filled and amount is a number.
Updating Totals: Adds the amount to either debited or credited totals based on the type.
Updating Table: Calls update_table to refresh the displayed entries.
Clearing Entries: Resets the input fields.
5. Updating the Table
python
Copy code
    def update_table(self):
        for row in self.tree.get_children():
            self.tree.delete(row)
        for entry in self.entries:
            self.tree.insert("", "end", values=(entry["Type"], f"${entry['Amount']:.2f}", entry["Category"], entry["Date"]))
Refreshing Data: Clears existing table rows and re-inserts updated data.
6. Updating Totals
python
Copy code
    def update_totals(self):
        self.total_debited_label.config(text=f"Total Debited: ${self.total_debited:.2f}")
        self.total_credited_label.config(text=f"Total Credited: ${self.total_credited:.2f}")
Updating Labels: Reflects the updated totals on the GUI.
7. Clearing Input Fields
python
Copy code
    def clear_entries(self):
        self.amount_entry.delete(0, "end")
        self.category_entry.delete(0, "end")
        self.date_entry.delete(0, "end")
        self.date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))
Resetting Fields: Clears and resets input fields for the next entry.
8. Exporting to CSV
python
Copy code
    def export_csv(self):
        df = pd.DataFrame(self.entries)
        df.to_csv('expenses.csv', index=False)
        messagebox.showinfo("Export Success", "Data exported to expenses.csv")
CSV Export: Converts entries to a DataFrame and saves them to a CSV file.
Confirmation: Shows a success message when the export is complete.
9. Running the Application
python
Copy code
if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTrackerApp(root)
    root.mainloop() 
Main Function: Initializes the Tkinter window and starts the application loop.
Conclusion
>>>>>>> origin/main
This Python application allows users to track their expenses and income, view totals, and export data to a CSV file. The GUI provides a user-friendly interface, while the backend logic ensures accurate data processing and exporting.